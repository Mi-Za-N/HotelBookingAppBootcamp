{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_TO_CART, INCREASE_CART_ITEM, DECREASE_CART_ITEM, REMOVE_FROM_CART } from \"../actions/cart\";\nimport CartItem from \"../../models/cart-item\";\nimport { ADD_ORDER } from \"../actions/orders\";\nvar initialState = {\n  items: {},\n  totalAmount: 0\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_TO_CART:\n      var addedProduct = action.payload;\n      var prodPrice = addedProduct.price;\n      var prodTitle = addedProduct.name;\n      var prodImage = addedProduct.image;\n\n      if (!state.items[addedProduct._id]) {\n        var newCartItem = new CartItem(1, prodPrice, prodTitle, prodImage, prodPrice);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          items: _objectSpread(_objectSpread({}, state.items), {}, _defineProperty({}, addedProduct._id, newCartItem)),\n          totalAmount: state.totalAmount + prodPrice\n        });\n      }\n\n    case INCREASE_CART_ITEM:\n      var increaseCartItem = state.items[action.payload];\n      var increseQty = increaseCartItem.quantity;\n      var updatedQty;\n\n      if (increseQty > 0) {\n        var updatedCartItem = new CartItem(increaseCartItem.quantity + 1, increaseCartItem.productPrice, increaseCartItem.productTitle, increaseCartItem.productImage, increaseCartItem.sum + increaseCartItem.productPrice);\n        updatedQty = _objectSpread(_objectSpread({}, state.items), {}, _defineProperty({}, action.payload, updatedCartItem));\n      } else {\n        updatedCartItems = _objectSpread({}, state.items);\n        updatedCartItems[action.payload];\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: updatedQty,\n        totalAmount: state.totalAmount + increaseCartItem.productPrice\n      });\n\n    case DECREASE_CART_ITEM:\n      var selectedCartItem = state.items[action.payload];\n      var currentQty = selectedCartItem.quantity;\n      var updatedCartItems;\n\n      if (currentQty > 1) {\n        var _updatedCartItem = new CartItem(selectedCartItem.quantity - 1, selectedCartItem.productPrice, selectedCartItem.productTitle, selectedCartItem.productImage, selectedCartItem.sum - selectedCartItem.productPrice);\n\n        updatedCartItems = _objectSpread(_objectSpread({}, state.items), {}, _defineProperty({}, action.payload, _updatedCartItem));\n      } else {\n        updatedCartItems = _objectSpread({}, state.items);\n        delete updatedCartItems[action.payload];\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: updatedCartItems,\n        totalAmount: state.totalAmount - selectedCartItem.productPrice\n      });\n\n    case ADD_ORDER:\n      return initialState;\n\n    case REMOVE_FROM_CART:\n      if (!state.items[action.payload]) {\n        return state;\n      }\n\n      var updatedItems = _objectSpread({}, state.items);\n\n      var itemTotal = state.items[action.payload].sum;\n      delete updatedItems[action.payload];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: updatedItems,\n        totalAmount: state.totalAmount - itemTotal\n      });\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/home/mizan/MobileApp/Grocery/store/reducers/cart.js"],"names":["ADD_TO_CART","INCREASE_CART_ITEM","DECREASE_CART_ITEM","REMOVE_FROM_CART","CartItem","ADD_ORDER","initialState","items","totalAmount","state","action","type","addedProduct","payload","prodPrice","price","prodTitle","name","prodImage","image","_id","newCartItem","increaseCartItem","increseQty","quantity","updatedQty","updatedCartItem","productPrice","productTitle","productImage","sum","updatedCartItems","selectedCartItem","currentQty","updatedItems","itemTotal"],"mappings":"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","sourcesContent":["import {\n  ADD_TO_CART,\n  INCREASE_CART_ITEM,\n  DECREASE_CART_ITEM,\n  REMOVE_FROM_CART,\n} from \"../actions/cart\";\n\nimport CartItem from \"../../models/cart-item\";\nimport { ADD_ORDER } from \"../actions/orders\";\n\n// import { REHYDRATE } from 'redux-persist/constants';\n\nconst initialState = {\n  items: {},\n  totalAmount: 0,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    // case REHYDRATE:\n    //   return action.payload.cart || [];\n    \n    case ADD_TO_CART:\n      const addedProduct = action.payload;\n      const prodPrice = addedProduct.price;\n      const prodTitle = addedProduct.name;\n      const prodImage = addedProduct.image;\n\n      // add only one product to cart\n      if (!state.items[addedProduct._id]) {\n        const newCartItem = new CartItem(\n          1,\n          prodPrice,\n          prodTitle,\n          prodImage,\n          prodPrice\n        );\n        return {\n          ...state,\n          items: { ...state.items, [addedProduct._id]: newCartItem },\n          totalAmount: state.totalAmount + prodPrice,\n        };\n      }\n\n    case INCREASE_CART_ITEM:\n      const increaseCartItem = state.items[action.payload];\n      const increseQty = increaseCartItem.quantity;\n      let updatedQty;\n      if (increseQty > 0) {\n        // need to increase\n        const updatedCartItem = new CartItem(\n          increaseCartItem.quantity + 1,\n          increaseCartItem.productPrice,\n          increaseCartItem.productTitle,\n          increaseCartItem.productImage,\n          increaseCartItem.sum + increaseCartItem.productPrice\n        );\n        updatedQty = {\n          ...state.items,\n          [action.payload]: updatedCartItem,\n        };\n      } else {\n        updatedCartItems = { ...state.items };\n        updatedCartItems[action.payload];\n      }\n      return {\n        ...state,\n        items: updatedQty,\n        totalAmount: state.totalAmount + increaseCartItem.productPrice,\n      };\n    //         // add to cart (single item=else block) & increase cart item\n    // let updatedOrNewCartItem;\n\n    // if (state.items[addedProduct.id]) {\n    //   // already have the item in the cart\n    //   updatedOrNewCartItem = new CartItem(\n    //     state.items[addedProduct.id].quantity + 1,\n    //     prodPrice,\n    //     prodTitle,\n    //     state.items[addedProduct.id].sum + prodPrice\n    //   );\n    // } else {\n    //   // new item add\n    //   updatedOrNewCartItem = new CartItem(1, prodPrice, prodTitle, prodPrice);\n    // }\n    // return {\n    //   ...state,\n    //   items: { ...state.items, [addedProduct.id]: updatedOrNewCartItem },\n    //   totalAmount: state.totalAmount + prodPrice,\n    // };\n    case DECREASE_CART_ITEM:\n      const selectedCartItem = state.items[action.payload];\n      const currentQty = selectedCartItem.quantity;\n      let updatedCartItems;\n      if (currentQty > 1) {\n        // need to reduce it, not erase it\n        const updatedCartItem = new CartItem(\n          selectedCartItem.quantity - 1,\n          selectedCartItem.productPrice,\n          selectedCartItem.productTitle,\n          selectedCartItem.productImage,\n\n          selectedCartItem.sum - selectedCartItem.productPrice\n        );\n        updatedCartItems = {\n          ...state.items,\n          [action.payload]: updatedCartItem,\n        };\n      } else {\n        updatedCartItems = { ...state.items };\n        delete updatedCartItems[action.payload];\n      }\n      return {\n        ...state,\n        items: updatedCartItems,\n        totalAmount: state.totalAmount - selectedCartItem.productPrice,\n      };\n\n    case ADD_ORDER:\n      return initialState;\n    case REMOVE_FROM_CART:\n      if (!state.items[action.payload]) {\n        return state;\n      }\n      const updatedItems = { ...state.items };\n      const itemTotal = state.items[action.payload].sum;\n      delete updatedItems[action.payload];\n      return {\n        ...state,\n        items: updatedItems,\n        totalAmount: state.totalAmount - itemTotal,\n      };\n  }\n\n \n  return state;\n};\n\n// extra code\n\n// if (state.items[addedProduct.id]) {\n//   // already have the item in the cart\n//   const updatedCartItem = new CartItem(\n//     state.items[addedProduct.id].quantity + 1,\n//     prodPrice,\n//     prodTitle,\n//     state.items[addedProduct.id].sum + prodPrice\n//   );\n//   return {\n//     ...state,\n//     items: { ...state.items, [addedProduct.id]: updatedCartItem },\n//     totalAmount: state.totalAmount + prodPrice,\n//   };\n// } else {\n//   const newCartItem = new CartItem(1, prodPrice, prodTitle, prodPrice);\n//   return {\n//     ...state,\n//     items: { ...state.items, [addedProduct.id]: newCartItem },\n//     totalAmount: state.totalAmount + prodPrice,\n//   };\n// }\n\n// let updatedOrNewCartItem;\n\n// if (state.items[addedProduct.id]) {\n//   // already have the item in the cart\n//   updatedOrNewCartItem = new CartItem(\n//     state.items[addedProduct.id].quantity + 1,\n//     prodPrice,\n//     prodTitle,\n//     prodImage,\n//     state.items[addedProduct.id].sum + prodPrice\n//   );\n// } else {\n//   // new item add\n//   updatedOrNewCartItem = new CartItem(\n//     1,\n//     prodPrice,\n//     prodTitle,\n//     prodImage,\n//     prodPrice\n//   );\n// }\n// return {\n//   ...state,\n//   items: { ...state.items, [addedProduct.id]: updatedOrNewCartItem },\n//   totalAmount: state.totalAmount + prodPrice,\n// };\n"]},"metadata":{},"sourceType":"module"}